
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Gerant
 * 
 */
export type Gerant = $Result.DefaultSelection<Prisma.$GerantPayload>
/**
 * Model Barque
 * 
 */
export type Barque = $Result.DefaultSelection<Prisma.$BarquePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Gerants
 * const gerants = await prisma.gerant.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Gerants
   * const gerants = await prisma.gerant.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.gerant`: Exposes CRUD operations for the **Gerant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Gerants
    * const gerants = await prisma.gerant.findMany()
    * ```
    */
  get gerant(): Prisma.GerantDelegate<ExtArgs>;

  /**
   * `prisma.barque`: Exposes CRUD operations for the **Barque** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Barques
    * const barques = await prisma.barque.findMany()
    * ```
    */
  get barque(): Prisma.BarqueDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Gerant: 'Gerant',
    Barque: 'Barque'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "gerant" | "barque"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Gerant: {
        payload: Prisma.$GerantPayload<ExtArgs>
        fields: Prisma.GerantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GerantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GerantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GerantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GerantPayload>
          }
          findFirst: {
            args: Prisma.GerantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GerantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GerantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GerantPayload>
          }
          findMany: {
            args: Prisma.GerantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GerantPayload>[]
          }
          create: {
            args: Prisma.GerantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GerantPayload>
          }
          createMany: {
            args: Prisma.GerantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GerantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GerantPayload>[]
          }
          delete: {
            args: Prisma.GerantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GerantPayload>
          }
          update: {
            args: Prisma.GerantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GerantPayload>
          }
          deleteMany: {
            args: Prisma.GerantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GerantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GerantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GerantPayload>
          }
          aggregate: {
            args: Prisma.GerantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGerant>
          }
          groupBy: {
            args: Prisma.GerantGroupByArgs<ExtArgs>
            result: $Utils.Optional<GerantGroupByOutputType>[]
          }
          count: {
            args: Prisma.GerantCountArgs<ExtArgs>
            result: $Utils.Optional<GerantCountAggregateOutputType> | number
          }
        }
      }
      Barque: {
        payload: Prisma.$BarquePayload<ExtArgs>
        fields: Prisma.BarqueFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BarqueFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BarquePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BarqueFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BarquePayload>
          }
          findFirst: {
            args: Prisma.BarqueFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BarquePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BarqueFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BarquePayload>
          }
          findMany: {
            args: Prisma.BarqueFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BarquePayload>[]
          }
          create: {
            args: Prisma.BarqueCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BarquePayload>
          }
          createMany: {
            args: Prisma.BarqueCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BarqueCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BarquePayload>[]
          }
          delete: {
            args: Prisma.BarqueDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BarquePayload>
          }
          update: {
            args: Prisma.BarqueUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BarquePayload>
          }
          deleteMany: {
            args: Prisma.BarqueDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BarqueUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BarqueUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BarquePayload>
          }
          aggregate: {
            args: Prisma.BarqueAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBarque>
          }
          groupBy: {
            args: Prisma.BarqueGroupByArgs<ExtArgs>
            result: $Utils.Optional<BarqueGroupByOutputType>[]
          }
          count: {
            args: Prisma.BarqueCountArgs<ExtArgs>
            result: $Utils.Optional<BarqueCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type GerantCountOutputType
   */

  export type GerantCountOutputType = {
    barques: number
  }

  export type GerantCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    barques?: boolean | GerantCountOutputTypeCountBarquesArgs
  }

  // Custom InputTypes
  /**
   * GerantCountOutputType without action
   */
  export type GerantCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GerantCountOutputType
     */
    select?: GerantCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GerantCountOutputType without action
   */
  export type GerantCountOutputTypeCountBarquesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BarqueWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Gerant
   */

  export type AggregateGerant = {
    _count: GerantCountAggregateOutputType | null
    _avg: GerantAvgAggregateOutputType | null
    _sum: GerantSumAggregateOutputType | null
    _min: GerantMinAggregateOutputType | null
    _max: GerantMaxAggregateOutputType | null
  }

  export type GerantAvgAggregateOutputType = {
    id: number | null
  }

  export type GerantSumAggregateOutputType = {
    id: number | null
  }

  export type GerantMinAggregateOutputType = {
    id: number | null
    nom: string | null
    prenom: string | null
    cine: string | null
    telephone: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GerantMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    prenom: string | null
    cine: string | null
    telephone: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GerantCountAggregateOutputType = {
    id: number
    nom: number
    prenom: number
    cine: number
    telephone: number
    email: number
    password: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GerantAvgAggregateInputType = {
    id?: true
  }

  export type GerantSumAggregateInputType = {
    id?: true
  }

  export type GerantMinAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    cine?: true
    telephone?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GerantMaxAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    cine?: true
    telephone?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GerantCountAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    cine?: true
    telephone?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GerantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Gerant to aggregate.
     */
    where?: GerantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gerants to fetch.
     */
    orderBy?: GerantOrderByWithRelationInput | GerantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GerantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gerants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gerants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Gerants
    **/
    _count?: true | GerantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GerantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GerantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GerantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GerantMaxAggregateInputType
  }

  export type GetGerantAggregateType<T extends GerantAggregateArgs> = {
        [P in keyof T & keyof AggregateGerant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGerant[P]>
      : GetScalarType<T[P], AggregateGerant[P]>
  }




  export type GerantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GerantWhereInput
    orderBy?: GerantOrderByWithAggregationInput | GerantOrderByWithAggregationInput[]
    by: GerantScalarFieldEnum[] | GerantScalarFieldEnum
    having?: GerantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GerantCountAggregateInputType | true
    _avg?: GerantAvgAggregateInputType
    _sum?: GerantSumAggregateInputType
    _min?: GerantMinAggregateInputType
    _max?: GerantMaxAggregateInputType
  }

  export type GerantGroupByOutputType = {
    id: number
    nom: string
    prenom: string
    cine: string
    telephone: string
    email: string
    password: string
    createdAt: Date
    updatedAt: Date
    _count: GerantCountAggregateOutputType | null
    _avg: GerantAvgAggregateOutputType | null
    _sum: GerantSumAggregateOutputType | null
    _min: GerantMinAggregateOutputType | null
    _max: GerantMaxAggregateOutputType | null
  }

  type GetGerantGroupByPayload<T extends GerantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GerantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GerantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GerantGroupByOutputType[P]>
            : GetScalarType<T[P], GerantGroupByOutputType[P]>
        }
      >
    >


  export type GerantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    prenom?: boolean
    cine?: boolean
    telephone?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    barques?: boolean | Gerant$barquesArgs<ExtArgs>
    _count?: boolean | GerantCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gerant"]>

  export type GerantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    prenom?: boolean
    cine?: boolean
    telephone?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["gerant"]>

  export type GerantSelectScalar = {
    id?: boolean
    nom?: boolean
    prenom?: boolean
    cine?: boolean
    telephone?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GerantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    barques?: boolean | Gerant$barquesArgs<ExtArgs>
    _count?: boolean | GerantCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GerantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $GerantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Gerant"
    objects: {
      barques: Prisma.$BarquePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      prenom: string
      cine: string
      telephone: string
      email: string
      password: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["gerant"]>
    composites: {}
  }

  type GerantGetPayload<S extends boolean | null | undefined | GerantDefaultArgs> = $Result.GetResult<Prisma.$GerantPayload, S>

  type GerantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GerantFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GerantCountAggregateInputType | true
    }

  export interface GerantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Gerant'], meta: { name: 'Gerant' } }
    /**
     * Find zero or one Gerant that matches the filter.
     * @param {GerantFindUniqueArgs} args - Arguments to find a Gerant
     * @example
     * // Get one Gerant
     * const gerant = await prisma.gerant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GerantFindUniqueArgs>(args: SelectSubset<T, GerantFindUniqueArgs<ExtArgs>>): Prisma__GerantClient<$Result.GetResult<Prisma.$GerantPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Gerant that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GerantFindUniqueOrThrowArgs} args - Arguments to find a Gerant
     * @example
     * // Get one Gerant
     * const gerant = await prisma.gerant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GerantFindUniqueOrThrowArgs>(args: SelectSubset<T, GerantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GerantClient<$Result.GetResult<Prisma.$GerantPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Gerant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GerantFindFirstArgs} args - Arguments to find a Gerant
     * @example
     * // Get one Gerant
     * const gerant = await prisma.gerant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GerantFindFirstArgs>(args?: SelectSubset<T, GerantFindFirstArgs<ExtArgs>>): Prisma__GerantClient<$Result.GetResult<Prisma.$GerantPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Gerant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GerantFindFirstOrThrowArgs} args - Arguments to find a Gerant
     * @example
     * // Get one Gerant
     * const gerant = await prisma.gerant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GerantFindFirstOrThrowArgs>(args?: SelectSubset<T, GerantFindFirstOrThrowArgs<ExtArgs>>): Prisma__GerantClient<$Result.GetResult<Prisma.$GerantPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Gerants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GerantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Gerants
     * const gerants = await prisma.gerant.findMany()
     * 
     * // Get first 10 Gerants
     * const gerants = await prisma.gerant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gerantWithIdOnly = await prisma.gerant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GerantFindManyArgs>(args?: SelectSubset<T, GerantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GerantPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Gerant.
     * @param {GerantCreateArgs} args - Arguments to create a Gerant.
     * @example
     * // Create one Gerant
     * const Gerant = await prisma.gerant.create({
     *   data: {
     *     // ... data to create a Gerant
     *   }
     * })
     * 
     */
    create<T extends GerantCreateArgs>(args: SelectSubset<T, GerantCreateArgs<ExtArgs>>): Prisma__GerantClient<$Result.GetResult<Prisma.$GerantPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Gerants.
     * @param {GerantCreateManyArgs} args - Arguments to create many Gerants.
     * @example
     * // Create many Gerants
     * const gerant = await prisma.gerant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GerantCreateManyArgs>(args?: SelectSubset<T, GerantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Gerants and returns the data saved in the database.
     * @param {GerantCreateManyAndReturnArgs} args - Arguments to create many Gerants.
     * @example
     * // Create many Gerants
     * const gerant = await prisma.gerant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Gerants and only return the `id`
     * const gerantWithIdOnly = await prisma.gerant.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GerantCreateManyAndReturnArgs>(args?: SelectSubset<T, GerantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GerantPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Gerant.
     * @param {GerantDeleteArgs} args - Arguments to delete one Gerant.
     * @example
     * // Delete one Gerant
     * const Gerant = await prisma.gerant.delete({
     *   where: {
     *     // ... filter to delete one Gerant
     *   }
     * })
     * 
     */
    delete<T extends GerantDeleteArgs>(args: SelectSubset<T, GerantDeleteArgs<ExtArgs>>): Prisma__GerantClient<$Result.GetResult<Prisma.$GerantPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Gerant.
     * @param {GerantUpdateArgs} args - Arguments to update one Gerant.
     * @example
     * // Update one Gerant
     * const gerant = await prisma.gerant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GerantUpdateArgs>(args: SelectSubset<T, GerantUpdateArgs<ExtArgs>>): Prisma__GerantClient<$Result.GetResult<Prisma.$GerantPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Gerants.
     * @param {GerantDeleteManyArgs} args - Arguments to filter Gerants to delete.
     * @example
     * // Delete a few Gerants
     * const { count } = await prisma.gerant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GerantDeleteManyArgs>(args?: SelectSubset<T, GerantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Gerants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GerantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Gerants
     * const gerant = await prisma.gerant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GerantUpdateManyArgs>(args: SelectSubset<T, GerantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Gerant.
     * @param {GerantUpsertArgs} args - Arguments to update or create a Gerant.
     * @example
     * // Update or create a Gerant
     * const gerant = await prisma.gerant.upsert({
     *   create: {
     *     // ... data to create a Gerant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Gerant we want to update
     *   }
     * })
     */
    upsert<T extends GerantUpsertArgs>(args: SelectSubset<T, GerantUpsertArgs<ExtArgs>>): Prisma__GerantClient<$Result.GetResult<Prisma.$GerantPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Gerants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GerantCountArgs} args - Arguments to filter Gerants to count.
     * @example
     * // Count the number of Gerants
     * const count = await prisma.gerant.count({
     *   where: {
     *     // ... the filter for the Gerants we want to count
     *   }
     * })
    **/
    count<T extends GerantCountArgs>(
      args?: Subset<T, GerantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GerantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Gerant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GerantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GerantAggregateArgs>(args: Subset<T, GerantAggregateArgs>): Prisma.PrismaPromise<GetGerantAggregateType<T>>

    /**
     * Group by Gerant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GerantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GerantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GerantGroupByArgs['orderBy'] }
        : { orderBy?: GerantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GerantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGerantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Gerant model
   */
  readonly fields: GerantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Gerant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GerantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    barques<T extends Gerant$barquesArgs<ExtArgs> = {}>(args?: Subset<T, Gerant$barquesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BarquePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Gerant model
   */ 
  interface GerantFieldRefs {
    readonly id: FieldRef<"Gerant", 'Int'>
    readonly nom: FieldRef<"Gerant", 'String'>
    readonly prenom: FieldRef<"Gerant", 'String'>
    readonly cine: FieldRef<"Gerant", 'String'>
    readonly telephone: FieldRef<"Gerant", 'String'>
    readonly email: FieldRef<"Gerant", 'String'>
    readonly password: FieldRef<"Gerant", 'String'>
    readonly createdAt: FieldRef<"Gerant", 'DateTime'>
    readonly updatedAt: FieldRef<"Gerant", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Gerant findUnique
   */
  export type GerantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gerant
     */
    select?: GerantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GerantInclude<ExtArgs> | null
    /**
     * Filter, which Gerant to fetch.
     */
    where: GerantWhereUniqueInput
  }

  /**
   * Gerant findUniqueOrThrow
   */
  export type GerantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gerant
     */
    select?: GerantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GerantInclude<ExtArgs> | null
    /**
     * Filter, which Gerant to fetch.
     */
    where: GerantWhereUniqueInput
  }

  /**
   * Gerant findFirst
   */
  export type GerantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gerant
     */
    select?: GerantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GerantInclude<ExtArgs> | null
    /**
     * Filter, which Gerant to fetch.
     */
    where?: GerantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gerants to fetch.
     */
    orderBy?: GerantOrderByWithRelationInput | GerantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Gerants.
     */
    cursor?: GerantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gerants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gerants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Gerants.
     */
    distinct?: GerantScalarFieldEnum | GerantScalarFieldEnum[]
  }

  /**
   * Gerant findFirstOrThrow
   */
  export type GerantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gerant
     */
    select?: GerantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GerantInclude<ExtArgs> | null
    /**
     * Filter, which Gerant to fetch.
     */
    where?: GerantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gerants to fetch.
     */
    orderBy?: GerantOrderByWithRelationInput | GerantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Gerants.
     */
    cursor?: GerantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gerants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gerants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Gerants.
     */
    distinct?: GerantScalarFieldEnum | GerantScalarFieldEnum[]
  }

  /**
   * Gerant findMany
   */
  export type GerantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gerant
     */
    select?: GerantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GerantInclude<ExtArgs> | null
    /**
     * Filter, which Gerants to fetch.
     */
    where?: GerantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gerants to fetch.
     */
    orderBy?: GerantOrderByWithRelationInput | GerantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Gerants.
     */
    cursor?: GerantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gerants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gerants.
     */
    skip?: number
    distinct?: GerantScalarFieldEnum | GerantScalarFieldEnum[]
  }

  /**
   * Gerant create
   */
  export type GerantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gerant
     */
    select?: GerantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GerantInclude<ExtArgs> | null
    /**
     * The data needed to create a Gerant.
     */
    data: XOR<GerantCreateInput, GerantUncheckedCreateInput>
  }

  /**
   * Gerant createMany
   */
  export type GerantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Gerants.
     */
    data: GerantCreateManyInput | GerantCreateManyInput[]
  }

  /**
   * Gerant createManyAndReturn
   */
  export type GerantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gerant
     */
    select?: GerantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Gerants.
     */
    data: GerantCreateManyInput | GerantCreateManyInput[]
  }

  /**
   * Gerant update
   */
  export type GerantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gerant
     */
    select?: GerantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GerantInclude<ExtArgs> | null
    /**
     * The data needed to update a Gerant.
     */
    data: XOR<GerantUpdateInput, GerantUncheckedUpdateInput>
    /**
     * Choose, which Gerant to update.
     */
    where: GerantWhereUniqueInput
  }

  /**
   * Gerant updateMany
   */
  export type GerantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Gerants.
     */
    data: XOR<GerantUpdateManyMutationInput, GerantUncheckedUpdateManyInput>
    /**
     * Filter which Gerants to update
     */
    where?: GerantWhereInput
  }

  /**
   * Gerant upsert
   */
  export type GerantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gerant
     */
    select?: GerantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GerantInclude<ExtArgs> | null
    /**
     * The filter to search for the Gerant to update in case it exists.
     */
    where: GerantWhereUniqueInput
    /**
     * In case the Gerant found by the `where` argument doesn't exist, create a new Gerant with this data.
     */
    create: XOR<GerantCreateInput, GerantUncheckedCreateInput>
    /**
     * In case the Gerant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GerantUpdateInput, GerantUncheckedUpdateInput>
  }

  /**
   * Gerant delete
   */
  export type GerantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gerant
     */
    select?: GerantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GerantInclude<ExtArgs> | null
    /**
     * Filter which Gerant to delete.
     */
    where: GerantWhereUniqueInput
  }

  /**
   * Gerant deleteMany
   */
  export type GerantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Gerants to delete
     */
    where?: GerantWhereInput
  }

  /**
   * Gerant.barques
   */
  export type Gerant$barquesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Barque
     */
    select?: BarqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarqueInclude<ExtArgs> | null
    where?: BarqueWhereInput
    orderBy?: BarqueOrderByWithRelationInput | BarqueOrderByWithRelationInput[]
    cursor?: BarqueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BarqueScalarFieldEnum | BarqueScalarFieldEnum[]
  }

  /**
   * Gerant without action
   */
  export type GerantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gerant
     */
    select?: GerantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GerantInclude<ExtArgs> | null
  }


  /**
   * Model Barque
   */

  export type AggregateBarque = {
    _count: BarqueCountAggregateOutputType | null
    _avg: BarqueAvgAggregateOutputType | null
    _sum: BarqueSumAggregateOutputType | null
    _min: BarqueMinAggregateOutputType | null
    _max: BarqueMaxAggregateOutputType | null
  }

  export type BarqueAvgAggregateOutputType = {
    id: number | null
    gerantId: number | null
  }

  export type BarqueSumAggregateOutputType = {
    id: number | null
    gerantId: number | null
  }

  export type BarqueMinAggregateOutputType = {
    id: number | null
    nom: string | null
    immatriculation: string | null
    portAttache: string | null
    statut: string | null
    affiliation: string | null
    gerantId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BarqueMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    immatriculation: string | null
    portAttache: string | null
    statut: string | null
    affiliation: string | null
    gerantId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BarqueCountAggregateOutputType = {
    id: number
    nom: number
    immatriculation: number
    portAttache: number
    statut: number
    affiliation: number
    gerantId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BarqueAvgAggregateInputType = {
    id?: true
    gerantId?: true
  }

  export type BarqueSumAggregateInputType = {
    id?: true
    gerantId?: true
  }

  export type BarqueMinAggregateInputType = {
    id?: true
    nom?: true
    immatriculation?: true
    portAttache?: true
    statut?: true
    affiliation?: true
    gerantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BarqueMaxAggregateInputType = {
    id?: true
    nom?: true
    immatriculation?: true
    portAttache?: true
    statut?: true
    affiliation?: true
    gerantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BarqueCountAggregateInputType = {
    id?: true
    nom?: true
    immatriculation?: true
    portAttache?: true
    statut?: true
    affiliation?: true
    gerantId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BarqueAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Barque to aggregate.
     */
    where?: BarqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Barques to fetch.
     */
    orderBy?: BarqueOrderByWithRelationInput | BarqueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BarqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Barques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Barques.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Barques
    **/
    _count?: true | BarqueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BarqueAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BarqueSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BarqueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BarqueMaxAggregateInputType
  }

  export type GetBarqueAggregateType<T extends BarqueAggregateArgs> = {
        [P in keyof T & keyof AggregateBarque]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBarque[P]>
      : GetScalarType<T[P], AggregateBarque[P]>
  }




  export type BarqueGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BarqueWhereInput
    orderBy?: BarqueOrderByWithAggregationInput | BarqueOrderByWithAggregationInput[]
    by: BarqueScalarFieldEnum[] | BarqueScalarFieldEnum
    having?: BarqueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BarqueCountAggregateInputType | true
    _avg?: BarqueAvgAggregateInputType
    _sum?: BarqueSumAggregateInputType
    _min?: BarqueMinAggregateInputType
    _max?: BarqueMaxAggregateInputType
  }

  export type BarqueGroupByOutputType = {
    id: number
    nom: string
    immatriculation: string
    portAttache: string
    statut: string
    affiliation: string | null
    gerantId: number
    createdAt: Date
    updatedAt: Date
    _count: BarqueCountAggregateOutputType | null
    _avg: BarqueAvgAggregateOutputType | null
    _sum: BarqueSumAggregateOutputType | null
    _min: BarqueMinAggregateOutputType | null
    _max: BarqueMaxAggregateOutputType | null
  }

  type GetBarqueGroupByPayload<T extends BarqueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BarqueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BarqueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BarqueGroupByOutputType[P]>
            : GetScalarType<T[P], BarqueGroupByOutputType[P]>
        }
      >
    >


  export type BarqueSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    immatriculation?: boolean
    portAttache?: boolean
    statut?: boolean
    affiliation?: boolean
    gerantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    gerant?: boolean | GerantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["barque"]>

  export type BarqueSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    immatriculation?: boolean
    portAttache?: boolean
    statut?: boolean
    affiliation?: boolean
    gerantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    gerant?: boolean | GerantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["barque"]>

  export type BarqueSelectScalar = {
    id?: boolean
    nom?: boolean
    immatriculation?: boolean
    portAttache?: boolean
    statut?: boolean
    affiliation?: boolean
    gerantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BarqueInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gerant?: boolean | GerantDefaultArgs<ExtArgs>
  }
  export type BarqueIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gerant?: boolean | GerantDefaultArgs<ExtArgs>
  }

  export type $BarquePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Barque"
    objects: {
      gerant: Prisma.$GerantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      immatriculation: string
      portAttache: string
      statut: string
      affiliation: string | null
      gerantId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["barque"]>
    composites: {}
  }

  type BarqueGetPayload<S extends boolean | null | undefined | BarqueDefaultArgs> = $Result.GetResult<Prisma.$BarquePayload, S>

  type BarqueCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BarqueFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BarqueCountAggregateInputType | true
    }

  export interface BarqueDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Barque'], meta: { name: 'Barque' } }
    /**
     * Find zero or one Barque that matches the filter.
     * @param {BarqueFindUniqueArgs} args - Arguments to find a Barque
     * @example
     * // Get one Barque
     * const barque = await prisma.barque.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BarqueFindUniqueArgs>(args: SelectSubset<T, BarqueFindUniqueArgs<ExtArgs>>): Prisma__BarqueClient<$Result.GetResult<Prisma.$BarquePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Barque that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BarqueFindUniqueOrThrowArgs} args - Arguments to find a Barque
     * @example
     * // Get one Barque
     * const barque = await prisma.barque.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BarqueFindUniqueOrThrowArgs>(args: SelectSubset<T, BarqueFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BarqueClient<$Result.GetResult<Prisma.$BarquePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Barque that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BarqueFindFirstArgs} args - Arguments to find a Barque
     * @example
     * // Get one Barque
     * const barque = await prisma.barque.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BarqueFindFirstArgs>(args?: SelectSubset<T, BarqueFindFirstArgs<ExtArgs>>): Prisma__BarqueClient<$Result.GetResult<Prisma.$BarquePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Barque that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BarqueFindFirstOrThrowArgs} args - Arguments to find a Barque
     * @example
     * // Get one Barque
     * const barque = await prisma.barque.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BarqueFindFirstOrThrowArgs>(args?: SelectSubset<T, BarqueFindFirstOrThrowArgs<ExtArgs>>): Prisma__BarqueClient<$Result.GetResult<Prisma.$BarquePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Barques that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BarqueFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Barques
     * const barques = await prisma.barque.findMany()
     * 
     * // Get first 10 Barques
     * const barques = await prisma.barque.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const barqueWithIdOnly = await prisma.barque.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BarqueFindManyArgs>(args?: SelectSubset<T, BarqueFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BarquePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Barque.
     * @param {BarqueCreateArgs} args - Arguments to create a Barque.
     * @example
     * // Create one Barque
     * const Barque = await prisma.barque.create({
     *   data: {
     *     // ... data to create a Barque
     *   }
     * })
     * 
     */
    create<T extends BarqueCreateArgs>(args: SelectSubset<T, BarqueCreateArgs<ExtArgs>>): Prisma__BarqueClient<$Result.GetResult<Prisma.$BarquePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Barques.
     * @param {BarqueCreateManyArgs} args - Arguments to create many Barques.
     * @example
     * // Create many Barques
     * const barque = await prisma.barque.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BarqueCreateManyArgs>(args?: SelectSubset<T, BarqueCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Barques and returns the data saved in the database.
     * @param {BarqueCreateManyAndReturnArgs} args - Arguments to create many Barques.
     * @example
     * // Create many Barques
     * const barque = await prisma.barque.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Barques and only return the `id`
     * const barqueWithIdOnly = await prisma.barque.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BarqueCreateManyAndReturnArgs>(args?: SelectSubset<T, BarqueCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BarquePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Barque.
     * @param {BarqueDeleteArgs} args - Arguments to delete one Barque.
     * @example
     * // Delete one Barque
     * const Barque = await prisma.barque.delete({
     *   where: {
     *     // ... filter to delete one Barque
     *   }
     * })
     * 
     */
    delete<T extends BarqueDeleteArgs>(args: SelectSubset<T, BarqueDeleteArgs<ExtArgs>>): Prisma__BarqueClient<$Result.GetResult<Prisma.$BarquePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Barque.
     * @param {BarqueUpdateArgs} args - Arguments to update one Barque.
     * @example
     * // Update one Barque
     * const barque = await prisma.barque.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BarqueUpdateArgs>(args: SelectSubset<T, BarqueUpdateArgs<ExtArgs>>): Prisma__BarqueClient<$Result.GetResult<Prisma.$BarquePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Barques.
     * @param {BarqueDeleteManyArgs} args - Arguments to filter Barques to delete.
     * @example
     * // Delete a few Barques
     * const { count } = await prisma.barque.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BarqueDeleteManyArgs>(args?: SelectSubset<T, BarqueDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Barques.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BarqueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Barques
     * const barque = await prisma.barque.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BarqueUpdateManyArgs>(args: SelectSubset<T, BarqueUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Barque.
     * @param {BarqueUpsertArgs} args - Arguments to update or create a Barque.
     * @example
     * // Update or create a Barque
     * const barque = await prisma.barque.upsert({
     *   create: {
     *     // ... data to create a Barque
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Barque we want to update
     *   }
     * })
     */
    upsert<T extends BarqueUpsertArgs>(args: SelectSubset<T, BarqueUpsertArgs<ExtArgs>>): Prisma__BarqueClient<$Result.GetResult<Prisma.$BarquePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Barques.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BarqueCountArgs} args - Arguments to filter Barques to count.
     * @example
     * // Count the number of Barques
     * const count = await prisma.barque.count({
     *   where: {
     *     // ... the filter for the Barques we want to count
     *   }
     * })
    **/
    count<T extends BarqueCountArgs>(
      args?: Subset<T, BarqueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BarqueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Barque.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BarqueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BarqueAggregateArgs>(args: Subset<T, BarqueAggregateArgs>): Prisma.PrismaPromise<GetBarqueAggregateType<T>>

    /**
     * Group by Barque.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BarqueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BarqueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BarqueGroupByArgs['orderBy'] }
        : { orderBy?: BarqueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BarqueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBarqueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Barque model
   */
  readonly fields: BarqueFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Barque.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BarqueClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    gerant<T extends GerantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GerantDefaultArgs<ExtArgs>>): Prisma__GerantClient<$Result.GetResult<Prisma.$GerantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Barque model
   */ 
  interface BarqueFieldRefs {
    readonly id: FieldRef<"Barque", 'Int'>
    readonly nom: FieldRef<"Barque", 'String'>
    readonly immatriculation: FieldRef<"Barque", 'String'>
    readonly portAttache: FieldRef<"Barque", 'String'>
    readonly statut: FieldRef<"Barque", 'String'>
    readonly affiliation: FieldRef<"Barque", 'String'>
    readonly gerantId: FieldRef<"Barque", 'Int'>
    readonly createdAt: FieldRef<"Barque", 'DateTime'>
    readonly updatedAt: FieldRef<"Barque", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Barque findUnique
   */
  export type BarqueFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Barque
     */
    select?: BarqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarqueInclude<ExtArgs> | null
    /**
     * Filter, which Barque to fetch.
     */
    where: BarqueWhereUniqueInput
  }

  /**
   * Barque findUniqueOrThrow
   */
  export type BarqueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Barque
     */
    select?: BarqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarqueInclude<ExtArgs> | null
    /**
     * Filter, which Barque to fetch.
     */
    where: BarqueWhereUniqueInput
  }

  /**
   * Barque findFirst
   */
  export type BarqueFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Barque
     */
    select?: BarqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarqueInclude<ExtArgs> | null
    /**
     * Filter, which Barque to fetch.
     */
    where?: BarqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Barques to fetch.
     */
    orderBy?: BarqueOrderByWithRelationInput | BarqueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Barques.
     */
    cursor?: BarqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Barques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Barques.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Barques.
     */
    distinct?: BarqueScalarFieldEnum | BarqueScalarFieldEnum[]
  }

  /**
   * Barque findFirstOrThrow
   */
  export type BarqueFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Barque
     */
    select?: BarqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarqueInclude<ExtArgs> | null
    /**
     * Filter, which Barque to fetch.
     */
    where?: BarqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Barques to fetch.
     */
    orderBy?: BarqueOrderByWithRelationInput | BarqueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Barques.
     */
    cursor?: BarqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Barques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Barques.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Barques.
     */
    distinct?: BarqueScalarFieldEnum | BarqueScalarFieldEnum[]
  }

  /**
   * Barque findMany
   */
  export type BarqueFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Barque
     */
    select?: BarqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarqueInclude<ExtArgs> | null
    /**
     * Filter, which Barques to fetch.
     */
    where?: BarqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Barques to fetch.
     */
    orderBy?: BarqueOrderByWithRelationInput | BarqueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Barques.
     */
    cursor?: BarqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Barques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Barques.
     */
    skip?: number
    distinct?: BarqueScalarFieldEnum | BarqueScalarFieldEnum[]
  }

  /**
   * Barque create
   */
  export type BarqueCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Barque
     */
    select?: BarqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarqueInclude<ExtArgs> | null
    /**
     * The data needed to create a Barque.
     */
    data: XOR<BarqueCreateInput, BarqueUncheckedCreateInput>
  }

  /**
   * Barque createMany
   */
  export type BarqueCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Barques.
     */
    data: BarqueCreateManyInput | BarqueCreateManyInput[]
  }

  /**
   * Barque createManyAndReturn
   */
  export type BarqueCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Barque
     */
    select?: BarqueSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Barques.
     */
    data: BarqueCreateManyInput | BarqueCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarqueIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Barque update
   */
  export type BarqueUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Barque
     */
    select?: BarqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarqueInclude<ExtArgs> | null
    /**
     * The data needed to update a Barque.
     */
    data: XOR<BarqueUpdateInput, BarqueUncheckedUpdateInput>
    /**
     * Choose, which Barque to update.
     */
    where: BarqueWhereUniqueInput
  }

  /**
   * Barque updateMany
   */
  export type BarqueUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Barques.
     */
    data: XOR<BarqueUpdateManyMutationInput, BarqueUncheckedUpdateManyInput>
    /**
     * Filter which Barques to update
     */
    where?: BarqueWhereInput
  }

  /**
   * Barque upsert
   */
  export type BarqueUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Barque
     */
    select?: BarqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarqueInclude<ExtArgs> | null
    /**
     * The filter to search for the Barque to update in case it exists.
     */
    where: BarqueWhereUniqueInput
    /**
     * In case the Barque found by the `where` argument doesn't exist, create a new Barque with this data.
     */
    create: XOR<BarqueCreateInput, BarqueUncheckedCreateInput>
    /**
     * In case the Barque was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BarqueUpdateInput, BarqueUncheckedUpdateInput>
  }

  /**
   * Barque delete
   */
  export type BarqueDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Barque
     */
    select?: BarqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarqueInclude<ExtArgs> | null
    /**
     * Filter which Barque to delete.
     */
    where: BarqueWhereUniqueInput
  }

  /**
   * Barque deleteMany
   */
  export type BarqueDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Barques to delete
     */
    where?: BarqueWhereInput
  }

  /**
   * Barque without action
   */
  export type BarqueDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Barque
     */
    select?: BarqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarqueInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const GerantScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    prenom: 'prenom',
    cine: 'cine',
    telephone: 'telephone',
    email: 'email',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GerantScalarFieldEnum = (typeof GerantScalarFieldEnum)[keyof typeof GerantScalarFieldEnum]


  export const BarqueScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    immatriculation: 'immatriculation',
    portAttache: 'portAttache',
    statut: 'statut',
    affiliation: 'affiliation',
    gerantId: 'gerantId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BarqueScalarFieldEnum = (typeof BarqueScalarFieldEnum)[keyof typeof BarqueScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type GerantWhereInput = {
    AND?: GerantWhereInput | GerantWhereInput[]
    OR?: GerantWhereInput[]
    NOT?: GerantWhereInput | GerantWhereInput[]
    id?: IntFilter<"Gerant"> | number
    nom?: StringFilter<"Gerant"> | string
    prenom?: StringFilter<"Gerant"> | string
    cine?: StringFilter<"Gerant"> | string
    telephone?: StringFilter<"Gerant"> | string
    email?: StringFilter<"Gerant"> | string
    password?: StringFilter<"Gerant"> | string
    createdAt?: DateTimeFilter<"Gerant"> | Date | string
    updatedAt?: DateTimeFilter<"Gerant"> | Date | string
    barques?: BarqueListRelationFilter
  }

  export type GerantOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    cine?: SortOrder
    telephone?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    barques?: BarqueOrderByRelationAggregateInput
  }

  export type GerantWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    cine?: string
    email?: string
    AND?: GerantWhereInput | GerantWhereInput[]
    OR?: GerantWhereInput[]
    NOT?: GerantWhereInput | GerantWhereInput[]
    nom?: StringFilter<"Gerant"> | string
    prenom?: StringFilter<"Gerant"> | string
    telephone?: StringFilter<"Gerant"> | string
    password?: StringFilter<"Gerant"> | string
    createdAt?: DateTimeFilter<"Gerant"> | Date | string
    updatedAt?: DateTimeFilter<"Gerant"> | Date | string
    barques?: BarqueListRelationFilter
  }, "id" | "cine" | "email">

  export type GerantOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    cine?: SortOrder
    telephone?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GerantCountOrderByAggregateInput
    _avg?: GerantAvgOrderByAggregateInput
    _max?: GerantMaxOrderByAggregateInput
    _min?: GerantMinOrderByAggregateInput
    _sum?: GerantSumOrderByAggregateInput
  }

  export type GerantScalarWhereWithAggregatesInput = {
    AND?: GerantScalarWhereWithAggregatesInput | GerantScalarWhereWithAggregatesInput[]
    OR?: GerantScalarWhereWithAggregatesInput[]
    NOT?: GerantScalarWhereWithAggregatesInput | GerantScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Gerant"> | number
    nom?: StringWithAggregatesFilter<"Gerant"> | string
    prenom?: StringWithAggregatesFilter<"Gerant"> | string
    cine?: StringWithAggregatesFilter<"Gerant"> | string
    telephone?: StringWithAggregatesFilter<"Gerant"> | string
    email?: StringWithAggregatesFilter<"Gerant"> | string
    password?: StringWithAggregatesFilter<"Gerant"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Gerant"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Gerant"> | Date | string
  }

  export type BarqueWhereInput = {
    AND?: BarqueWhereInput | BarqueWhereInput[]
    OR?: BarqueWhereInput[]
    NOT?: BarqueWhereInput | BarqueWhereInput[]
    id?: IntFilter<"Barque"> | number
    nom?: StringFilter<"Barque"> | string
    immatriculation?: StringFilter<"Barque"> | string
    portAttache?: StringFilter<"Barque"> | string
    statut?: StringFilter<"Barque"> | string
    affiliation?: StringNullableFilter<"Barque"> | string | null
    gerantId?: IntFilter<"Barque"> | number
    createdAt?: DateTimeFilter<"Barque"> | Date | string
    updatedAt?: DateTimeFilter<"Barque"> | Date | string
    gerant?: XOR<GerantRelationFilter, GerantWhereInput>
  }

  export type BarqueOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    immatriculation?: SortOrder
    portAttache?: SortOrder
    statut?: SortOrder
    affiliation?: SortOrderInput | SortOrder
    gerantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    gerant?: GerantOrderByWithRelationInput
  }

  export type BarqueWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    immatriculation?: string
    AND?: BarqueWhereInput | BarqueWhereInput[]
    OR?: BarqueWhereInput[]
    NOT?: BarqueWhereInput | BarqueWhereInput[]
    nom?: StringFilter<"Barque"> | string
    portAttache?: StringFilter<"Barque"> | string
    statut?: StringFilter<"Barque"> | string
    affiliation?: StringNullableFilter<"Barque"> | string | null
    gerantId?: IntFilter<"Barque"> | number
    createdAt?: DateTimeFilter<"Barque"> | Date | string
    updatedAt?: DateTimeFilter<"Barque"> | Date | string
    gerant?: XOR<GerantRelationFilter, GerantWhereInput>
  }, "id" | "immatriculation">

  export type BarqueOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    immatriculation?: SortOrder
    portAttache?: SortOrder
    statut?: SortOrder
    affiliation?: SortOrderInput | SortOrder
    gerantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BarqueCountOrderByAggregateInput
    _avg?: BarqueAvgOrderByAggregateInput
    _max?: BarqueMaxOrderByAggregateInput
    _min?: BarqueMinOrderByAggregateInput
    _sum?: BarqueSumOrderByAggregateInput
  }

  export type BarqueScalarWhereWithAggregatesInput = {
    AND?: BarqueScalarWhereWithAggregatesInput | BarqueScalarWhereWithAggregatesInput[]
    OR?: BarqueScalarWhereWithAggregatesInput[]
    NOT?: BarqueScalarWhereWithAggregatesInput | BarqueScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Barque"> | number
    nom?: StringWithAggregatesFilter<"Barque"> | string
    immatriculation?: StringWithAggregatesFilter<"Barque"> | string
    portAttache?: StringWithAggregatesFilter<"Barque"> | string
    statut?: StringWithAggregatesFilter<"Barque"> | string
    affiliation?: StringNullableWithAggregatesFilter<"Barque"> | string | null
    gerantId?: IntWithAggregatesFilter<"Barque"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Barque"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Barque"> | Date | string
  }

  export type GerantCreateInput = {
    nom: string
    prenom: string
    cine: string
    telephone: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    barques?: BarqueCreateNestedManyWithoutGerantInput
  }

  export type GerantUncheckedCreateInput = {
    id?: number
    nom: string
    prenom: string
    cine: string
    telephone: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    barques?: BarqueUncheckedCreateNestedManyWithoutGerantInput
  }

  export type GerantUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    cine?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    barques?: BarqueUpdateManyWithoutGerantNestedInput
  }

  export type GerantUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    cine?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    barques?: BarqueUncheckedUpdateManyWithoutGerantNestedInput
  }

  export type GerantCreateManyInput = {
    id?: number
    nom: string
    prenom: string
    cine: string
    telephone: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GerantUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    cine?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GerantUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    cine?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BarqueCreateInput = {
    nom: string
    immatriculation: string
    portAttache: string
    statut?: string
    affiliation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    gerant: GerantCreateNestedOneWithoutBarquesInput
  }

  export type BarqueUncheckedCreateInput = {
    id?: number
    nom: string
    immatriculation: string
    portAttache: string
    statut?: string
    affiliation?: string | null
    gerantId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BarqueUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    immatriculation?: StringFieldUpdateOperationsInput | string
    portAttache?: StringFieldUpdateOperationsInput | string
    statut?: StringFieldUpdateOperationsInput | string
    affiliation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gerant?: GerantUpdateOneRequiredWithoutBarquesNestedInput
  }

  export type BarqueUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    immatriculation?: StringFieldUpdateOperationsInput | string
    portAttache?: StringFieldUpdateOperationsInput | string
    statut?: StringFieldUpdateOperationsInput | string
    affiliation?: NullableStringFieldUpdateOperationsInput | string | null
    gerantId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BarqueCreateManyInput = {
    id?: number
    nom: string
    immatriculation: string
    portAttache: string
    statut?: string
    affiliation?: string | null
    gerantId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BarqueUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    immatriculation?: StringFieldUpdateOperationsInput | string
    portAttache?: StringFieldUpdateOperationsInput | string
    statut?: StringFieldUpdateOperationsInput | string
    affiliation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BarqueUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    immatriculation?: StringFieldUpdateOperationsInput | string
    portAttache?: StringFieldUpdateOperationsInput | string
    statut?: StringFieldUpdateOperationsInput | string
    affiliation?: NullableStringFieldUpdateOperationsInput | string | null
    gerantId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BarqueListRelationFilter = {
    every?: BarqueWhereInput
    some?: BarqueWhereInput
    none?: BarqueWhereInput
  }

  export type BarqueOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GerantCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    cine?: SortOrder
    telephone?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GerantAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GerantMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    cine?: SortOrder
    telephone?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GerantMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    cine?: SortOrder
    telephone?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GerantSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type GerantRelationFilter = {
    is?: GerantWhereInput
    isNot?: GerantWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type BarqueCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    immatriculation?: SortOrder
    portAttache?: SortOrder
    statut?: SortOrder
    affiliation?: SortOrder
    gerantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BarqueAvgOrderByAggregateInput = {
    id?: SortOrder
    gerantId?: SortOrder
  }

  export type BarqueMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    immatriculation?: SortOrder
    portAttache?: SortOrder
    statut?: SortOrder
    affiliation?: SortOrder
    gerantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BarqueMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    immatriculation?: SortOrder
    portAttache?: SortOrder
    statut?: SortOrder
    affiliation?: SortOrder
    gerantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BarqueSumOrderByAggregateInput = {
    id?: SortOrder
    gerantId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BarqueCreateNestedManyWithoutGerantInput = {
    create?: XOR<BarqueCreateWithoutGerantInput, BarqueUncheckedCreateWithoutGerantInput> | BarqueCreateWithoutGerantInput[] | BarqueUncheckedCreateWithoutGerantInput[]
    connectOrCreate?: BarqueCreateOrConnectWithoutGerantInput | BarqueCreateOrConnectWithoutGerantInput[]
    createMany?: BarqueCreateManyGerantInputEnvelope
    connect?: BarqueWhereUniqueInput | BarqueWhereUniqueInput[]
  }

  export type BarqueUncheckedCreateNestedManyWithoutGerantInput = {
    create?: XOR<BarqueCreateWithoutGerantInput, BarqueUncheckedCreateWithoutGerantInput> | BarqueCreateWithoutGerantInput[] | BarqueUncheckedCreateWithoutGerantInput[]
    connectOrCreate?: BarqueCreateOrConnectWithoutGerantInput | BarqueCreateOrConnectWithoutGerantInput[]
    createMany?: BarqueCreateManyGerantInputEnvelope
    connect?: BarqueWhereUniqueInput | BarqueWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BarqueUpdateManyWithoutGerantNestedInput = {
    create?: XOR<BarqueCreateWithoutGerantInput, BarqueUncheckedCreateWithoutGerantInput> | BarqueCreateWithoutGerantInput[] | BarqueUncheckedCreateWithoutGerantInput[]
    connectOrCreate?: BarqueCreateOrConnectWithoutGerantInput | BarqueCreateOrConnectWithoutGerantInput[]
    upsert?: BarqueUpsertWithWhereUniqueWithoutGerantInput | BarqueUpsertWithWhereUniqueWithoutGerantInput[]
    createMany?: BarqueCreateManyGerantInputEnvelope
    set?: BarqueWhereUniqueInput | BarqueWhereUniqueInput[]
    disconnect?: BarqueWhereUniqueInput | BarqueWhereUniqueInput[]
    delete?: BarqueWhereUniqueInput | BarqueWhereUniqueInput[]
    connect?: BarqueWhereUniqueInput | BarqueWhereUniqueInput[]
    update?: BarqueUpdateWithWhereUniqueWithoutGerantInput | BarqueUpdateWithWhereUniqueWithoutGerantInput[]
    updateMany?: BarqueUpdateManyWithWhereWithoutGerantInput | BarqueUpdateManyWithWhereWithoutGerantInput[]
    deleteMany?: BarqueScalarWhereInput | BarqueScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BarqueUncheckedUpdateManyWithoutGerantNestedInput = {
    create?: XOR<BarqueCreateWithoutGerantInput, BarqueUncheckedCreateWithoutGerantInput> | BarqueCreateWithoutGerantInput[] | BarqueUncheckedCreateWithoutGerantInput[]
    connectOrCreate?: BarqueCreateOrConnectWithoutGerantInput | BarqueCreateOrConnectWithoutGerantInput[]
    upsert?: BarqueUpsertWithWhereUniqueWithoutGerantInput | BarqueUpsertWithWhereUniqueWithoutGerantInput[]
    createMany?: BarqueCreateManyGerantInputEnvelope
    set?: BarqueWhereUniqueInput | BarqueWhereUniqueInput[]
    disconnect?: BarqueWhereUniqueInput | BarqueWhereUniqueInput[]
    delete?: BarqueWhereUniqueInput | BarqueWhereUniqueInput[]
    connect?: BarqueWhereUniqueInput | BarqueWhereUniqueInput[]
    update?: BarqueUpdateWithWhereUniqueWithoutGerantInput | BarqueUpdateWithWhereUniqueWithoutGerantInput[]
    updateMany?: BarqueUpdateManyWithWhereWithoutGerantInput | BarqueUpdateManyWithWhereWithoutGerantInput[]
    deleteMany?: BarqueScalarWhereInput | BarqueScalarWhereInput[]
  }

  export type GerantCreateNestedOneWithoutBarquesInput = {
    create?: XOR<GerantCreateWithoutBarquesInput, GerantUncheckedCreateWithoutBarquesInput>
    connectOrCreate?: GerantCreateOrConnectWithoutBarquesInput
    connect?: GerantWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type GerantUpdateOneRequiredWithoutBarquesNestedInput = {
    create?: XOR<GerantCreateWithoutBarquesInput, GerantUncheckedCreateWithoutBarquesInput>
    connectOrCreate?: GerantCreateOrConnectWithoutBarquesInput
    upsert?: GerantUpsertWithoutBarquesInput
    connect?: GerantWhereUniqueInput
    update?: XOR<XOR<GerantUpdateToOneWithWhereWithoutBarquesInput, GerantUpdateWithoutBarquesInput>, GerantUncheckedUpdateWithoutBarquesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BarqueCreateWithoutGerantInput = {
    nom: string
    immatriculation: string
    portAttache: string
    statut?: string
    affiliation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BarqueUncheckedCreateWithoutGerantInput = {
    id?: number
    nom: string
    immatriculation: string
    portAttache: string
    statut?: string
    affiliation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BarqueCreateOrConnectWithoutGerantInput = {
    where: BarqueWhereUniqueInput
    create: XOR<BarqueCreateWithoutGerantInput, BarqueUncheckedCreateWithoutGerantInput>
  }

  export type BarqueCreateManyGerantInputEnvelope = {
    data: BarqueCreateManyGerantInput | BarqueCreateManyGerantInput[]
  }

  export type BarqueUpsertWithWhereUniqueWithoutGerantInput = {
    where: BarqueWhereUniqueInput
    update: XOR<BarqueUpdateWithoutGerantInput, BarqueUncheckedUpdateWithoutGerantInput>
    create: XOR<BarqueCreateWithoutGerantInput, BarqueUncheckedCreateWithoutGerantInput>
  }

  export type BarqueUpdateWithWhereUniqueWithoutGerantInput = {
    where: BarqueWhereUniqueInput
    data: XOR<BarqueUpdateWithoutGerantInput, BarqueUncheckedUpdateWithoutGerantInput>
  }

  export type BarqueUpdateManyWithWhereWithoutGerantInput = {
    where: BarqueScalarWhereInput
    data: XOR<BarqueUpdateManyMutationInput, BarqueUncheckedUpdateManyWithoutGerantInput>
  }

  export type BarqueScalarWhereInput = {
    AND?: BarqueScalarWhereInput | BarqueScalarWhereInput[]
    OR?: BarqueScalarWhereInput[]
    NOT?: BarqueScalarWhereInput | BarqueScalarWhereInput[]
    id?: IntFilter<"Barque"> | number
    nom?: StringFilter<"Barque"> | string
    immatriculation?: StringFilter<"Barque"> | string
    portAttache?: StringFilter<"Barque"> | string
    statut?: StringFilter<"Barque"> | string
    affiliation?: StringNullableFilter<"Barque"> | string | null
    gerantId?: IntFilter<"Barque"> | number
    createdAt?: DateTimeFilter<"Barque"> | Date | string
    updatedAt?: DateTimeFilter<"Barque"> | Date | string
  }

  export type GerantCreateWithoutBarquesInput = {
    nom: string
    prenom: string
    cine: string
    telephone: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GerantUncheckedCreateWithoutBarquesInput = {
    id?: number
    nom: string
    prenom: string
    cine: string
    telephone: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GerantCreateOrConnectWithoutBarquesInput = {
    where: GerantWhereUniqueInput
    create: XOR<GerantCreateWithoutBarquesInput, GerantUncheckedCreateWithoutBarquesInput>
  }

  export type GerantUpsertWithoutBarquesInput = {
    update: XOR<GerantUpdateWithoutBarquesInput, GerantUncheckedUpdateWithoutBarquesInput>
    create: XOR<GerantCreateWithoutBarquesInput, GerantUncheckedCreateWithoutBarquesInput>
    where?: GerantWhereInput
  }

  export type GerantUpdateToOneWithWhereWithoutBarquesInput = {
    where?: GerantWhereInput
    data: XOR<GerantUpdateWithoutBarquesInput, GerantUncheckedUpdateWithoutBarquesInput>
  }

  export type GerantUpdateWithoutBarquesInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    cine?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GerantUncheckedUpdateWithoutBarquesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    cine?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BarqueCreateManyGerantInput = {
    id?: number
    nom: string
    immatriculation: string
    portAttache: string
    statut?: string
    affiliation?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BarqueUpdateWithoutGerantInput = {
    nom?: StringFieldUpdateOperationsInput | string
    immatriculation?: StringFieldUpdateOperationsInput | string
    portAttache?: StringFieldUpdateOperationsInput | string
    statut?: StringFieldUpdateOperationsInput | string
    affiliation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BarqueUncheckedUpdateWithoutGerantInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    immatriculation?: StringFieldUpdateOperationsInput | string
    portAttache?: StringFieldUpdateOperationsInput | string
    statut?: StringFieldUpdateOperationsInput | string
    affiliation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BarqueUncheckedUpdateManyWithoutGerantInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    immatriculation?: StringFieldUpdateOperationsInput | string
    portAttache?: StringFieldUpdateOperationsInput | string
    statut?: StringFieldUpdateOperationsInput | string
    affiliation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use GerantCountOutputTypeDefaultArgs instead
     */
    export type GerantCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GerantCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GerantDefaultArgs instead
     */
    export type GerantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GerantDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BarqueDefaultArgs instead
     */
    export type BarqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BarqueDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}